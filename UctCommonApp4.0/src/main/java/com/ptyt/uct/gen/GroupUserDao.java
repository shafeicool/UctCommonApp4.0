package com.ptyt.uct.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ptyt.uct.entity.GroupUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_GROUP_USER".
*/
public class GroupUserDao extends AbstractDao<GroupUser, Long> {

    public static final String TABLENAME = "TB_GROUP_USER";

    /**
     * Properties of entity GroupUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "id");
        public final static Property GroupId = new Property(1, long.class, "groupId", false, "group_id");
        public final static Property UserTel = new Property(2, String.class, "userTel", false, "user_tel");
        public final static Property UserName = new Property(3, String.class, "userName", false, "user_name");
        public final static Property UserIcon = new Property(4, String.class, "userIcon", false, "user_icon");
        public final static Property UserType = new Property(5, Integer.class, "userType", false, "user_type");
        public final static Property UserStatus = new Property(6, Integer.class, "userStatus", false, "user_status");
        public final static Property UserBlink = new Property(7, Integer.class, "userBlink", false, "user_blink");
        public final static Property UserOnline = new Property(8, Integer.class, "userOnline", false, "user_online");
        public final static Property UserNamePinYin = new Property(9, String.class, "userNamePinYin", false, "USER_NAME_PIN_YIN");
        public final static Property Latitude = new Property(10, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(11, Double.class, "longitude", false, "LONGITUDE");
    };


    public GroupUserDao(DaoConfig config) {
        super(config);
    }
    
    public GroupUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_GROUP_USER\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"group_id\" INTEGER NOT NULL ," + // 1: groupId
                "\"user_tel\" TEXT," + // 2: userTel
                "\"user_name\" TEXT," + // 3: userName
                "\"user_icon\" TEXT," + // 4: userIcon
                "\"user_type\" INTEGER," + // 5: userType
                "\"user_status\" INTEGER," + // 6: userStatus
                "\"user_blink\" INTEGER," + // 7: userBlink
                "\"user_online\" INTEGER," + // 8: userOnline
                "\"USER_NAME_PIN_YIN\" TEXT," + // 9: userNamePinYin
                "\"LATITUDE\" REAL," + // 10: latitude
                "\"LONGITUDE\" REAL);"); // 11: longitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_GROUP_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupUser entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getGroupId());
 
        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(3, userTel);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(5, userIcon);
        }
 
        Integer userType = entity.getUserType();
        if (userType != null) {
            stmt.bindLong(6, userType);
        }
 
        Integer userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindLong(7, userStatus);
        }
 
        Integer userBlink = entity.getUserBlink();
        if (userBlink != null) {
            stmt.bindLong(8, userBlink);
        }
 
        Integer userOnline = entity.getUserOnline();
        if (userOnline != null) {
            stmt.bindLong(9, userOnline);
        }
 
        String userNamePinYin = entity.getUserNamePinYin();
        if (userNamePinYin != null) {
            stmt.bindString(10, userNamePinYin);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(11, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(12, longitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupUser entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getGroupId());
 
        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(3, userTel);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(5, userIcon);
        }
 
        Integer userType = entity.getUserType();
        if (userType != null) {
            stmt.bindLong(6, userType);
        }
 
        Integer userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindLong(7, userStatus);
        }
 
        Integer userBlink = entity.getUserBlink();
        if (userBlink != null) {
            stmt.bindLong(8, userBlink);
        }
 
        Integer userOnline = entity.getUserOnline();
        if (userOnline != null) {
            stmt.bindLong(9, userOnline);
        }
 
        String userNamePinYin = entity.getUserNamePinYin();
        if (userNamePinYin != null) {
            stmt.bindString(10, userNamePinYin);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(11, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(12, longitude);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupUser readEntity(Cursor cursor, int offset) {
        GroupUser entity = new GroupUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getLong(offset + 1), // groupId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userTel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userIcon
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // userType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // userStatus
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // userBlink
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // userOnline
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userNamePinYin
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // latitude
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11) // longitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupUser entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupId(cursor.getLong(offset + 1));
        entity.setUserTel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUserStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUserBlink(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUserOnline(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUserNamePinYin(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLatitude(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setLongitude(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupUser entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupUser entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
