package com.ptyt.uct.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ptyt.uct.entity.Group;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_GROUP".
*/
public class GroupDao extends AbstractDao<Group, Long> {

    public static final String TABLENAME = "TB_GROUP";

    /**
     * Properties of entity Group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "id");
        public final static Property GrouTel = new Property(1, String.class, "grouTel", false, "group_tel");
        public final static Property GroupName = new Property(2, String.class, "groupName", false, "group_name");
        public final static Property GroupIcon = new Property(3, String.class, "groupIcon", false, "group_icon");
        public final static Property AdminTel = new Property(4, String.class, "adminTel", false, "admin_tel");
        public final static Property GroupCreateUser = new Property(5, String.class, "groupCreateUser", false, "group_creat_user");
        public final static Property GroupStatus = new Property(6, String.class, "groupStatus", false, "group_status");
        public final static Property GroupBlink = new Property(7, String.class, "groupBlink", false, "group_blink");
        public final static Property GroupParent = new Property(8, String.class, "groupParent", false, "group_parent");
    };


    public GroupDao(DaoConfig config) {
        super(config);
    }
    
    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_GROUP\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"group_tel\" TEXT NOT NULL UNIQUE ," + // 1: grouTel
                "\"group_name\" TEXT," + // 2: groupName
                "\"group_icon\" TEXT," + // 3: groupIcon
                "\"admin_tel\" TEXT," + // 4: adminTel
                "\"group_creat_user\" TEXT," + // 5: groupCreateUser
                "\"group_status\" TEXT," + // 6: groupStatus
                "\"group_blink\" TEXT," + // 7: groupBlink
                "\"group_parent\" TEXT);"); // 8: groupParent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_GROUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Group entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getGrouTel());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }
 
        String groupIcon = entity.getGroupIcon();
        if (groupIcon != null) {
            stmt.bindString(4, groupIcon);
        }
 
        String adminTel = entity.getAdminTel();
        if (adminTel != null) {
            stmt.bindString(5, adminTel);
        }
 
        String groupCreateUser = entity.getGroupCreateUser();
        if (groupCreateUser != null) {
            stmt.bindString(6, groupCreateUser);
        }
 
        String groupStatus = entity.getGroupStatus();
        if (groupStatus != null) {
            stmt.bindString(7, groupStatus);
        }
 
        String groupBlink = entity.getGroupBlink();
        if (groupBlink != null) {
            stmt.bindString(8, groupBlink);
        }
 
        String groupParent = entity.getGroupParent();
        if (groupParent != null) {
            stmt.bindString(9, groupParent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Group entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getGrouTel());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }
 
        String groupIcon = entity.getGroupIcon();
        if (groupIcon != null) {
            stmt.bindString(4, groupIcon);
        }
 
        String adminTel = entity.getAdminTel();
        if (adminTel != null) {
            stmt.bindString(5, adminTel);
        }
 
        String groupCreateUser = entity.getGroupCreateUser();
        if (groupCreateUser != null) {
            stmt.bindString(6, groupCreateUser);
        }
 
        String groupStatus = entity.getGroupStatus();
        if (groupStatus != null) {
            stmt.bindString(7, groupStatus);
        }
 
        String groupBlink = entity.getGroupBlink();
        if (groupBlink != null) {
            stmt.bindString(8, groupBlink);
        }
 
        String groupParent = entity.getGroupParent();
        if (groupParent != null) {
            stmt.bindString(9, groupParent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Group readEntity(Cursor cursor, int offset) {
        Group entity = new Group( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getString(offset + 1), // grouTel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // adminTel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // groupCreateUser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // groupStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // groupBlink
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // groupParent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Group entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGrouTel(cursor.getString(offset + 1));
        entity.setGroupName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdminTel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupCreateUser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupBlink(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupParent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Group entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Group entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
