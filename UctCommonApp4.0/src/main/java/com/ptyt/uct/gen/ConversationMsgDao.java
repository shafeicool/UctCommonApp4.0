package com.ptyt.uct.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ptyt.uct.entity.ConversationMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_CONVERSATION_MSG".
*/
public class ConversationMsgDao extends AbstractDao<ConversationMsg, Long> {

    public static final String TABLENAME = "TB_CONVERSATION_MSG";

    /**
     * Properties of entity ConversationMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "id");
        public final static Property MsgConversationId = new Property(1, long.class, "msgConversationId", false, "msg_conversation_id");
        public final static Property MsgTime = new Property(2, Long.class, "msgTime", false, "msg_time");
        public final static Property MsgSrcNo = new Property(3, String.class, "msgSrcNo", false, "msg_src_no");
        public final static Property MsgDstNo = new Property(4, String.class, "msgDstNo", false, "msg_dst_no");
        public final static Property GroupNo = new Property(5, String.class, "groupNo", false, "group_no");
        public final static Property MsgUctId = new Property(6, String.class, "msgUctId", false, "msg_uct_id");
        public final static Property MsgType = new Property(7, Integer.class, "msgType", false, "msg_type");
        public final static Property MsgTxtSplit = new Property(8, Integer.class, "msgTxtSplit", false, "msg_txt_split");
        public final static Property RecvCfm = new Property(9, Integer.class, "recvCfm", false, "recv_cfm");
        public final static Property RecvNotify = new Property(10, Integer.class, "recvNotify", false, "recv_notify");
        public final static Property RemoteMsgContent = new Property(11, String.class, "remoteMsgContent", false, "remote_msg_content");
        public final static Property Content = new Property(12, String.class, "content", false, "msg_content");
        public final static Property ContentLength = new Property(13, Integer.class, "contentLength", false, "content_length");
        public final static Property MsgDirection = new Property(14, Integer.class, "msgDirection", false, "msg_direction");
        public final static Property LocalImgPath = new Property(15, String.class, "localImgPath", false, "local_img_path");
        public final static Property RemoteImgPath = new Property(16, String.class, "remoteImgPath", false, "remote_img_path");
        public final static Property MsgStatus = new Property(17, Integer.class, "msgStatus", false, "msg_status");
        public final static Property CfmType = new Property(18, Integer.class, "cfmType", false, "cfm_type");
        public final static Property Result = new Property(19, Integer.class, "result", false, "result");
        public final static Property ReadStatus = new Property(20, Integer.class, "readStatus", false, "read_status");
        public final static Property AudioLength = new Property(21, Integer.class, "audioLength", false, "audio_length");
        public final static Property AudioPlayStatus = new Property(22, Integer.class, "audioPlayStatus", false, "audio_play_status");
        public final static Property AudioReadStatus = new Property(23, Integer.class, "audioReadStatus", false, "audio_read_status");
        public final static Property FileSize = new Property(24, Long.class, "fileSize", false, "file_size");
        public final static Property OffSize = new Property(25, Long.class, "offSize", false, "off_size");
    };


    public ConversationMsgDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_CONVERSATION_MSG\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"msg_conversation_id\" INTEGER NOT NULL ," + // 1: msgConversationId
                "\"msg_time\" INTEGER," + // 2: msgTime
                "\"msg_src_no\" TEXT NOT NULL ," + // 3: msgSrcNo
                "\"msg_dst_no\" TEXT NOT NULL ," + // 4: msgDstNo
                "\"group_no\" TEXT," + // 5: groupNo
                "\"msg_uct_id\" TEXT," + // 6: msgUctId
                "\"msg_type\" INTEGER," + // 7: msgType
                "\"msg_txt_split\" INTEGER," + // 8: msgTxtSplit
                "\"recv_cfm\" INTEGER," + // 9: recvCfm
                "\"recv_notify\" INTEGER," + // 10: recvNotify
                "\"remote_msg_content\" TEXT," + // 11: remoteMsgContent
                "\"msg_content\" TEXT," + // 12: content
                "\"content_length\" INTEGER," + // 13: contentLength
                "\"msg_direction\" INTEGER," + // 14: msgDirection
                "\"local_img_path\" TEXT," + // 15: localImgPath
                "\"remote_img_path\" TEXT," + // 16: remoteImgPath
                "\"msg_status\" INTEGER," + // 17: msgStatus
                "\"cfm_type\" INTEGER," + // 18: cfmType
                "\"result\" INTEGER," + // 19: result
                "\"read_status\" INTEGER," + // 20: readStatus
                "\"audio_length\" INTEGER," + // 21: audioLength
                "\"audio_play_status\" INTEGER," + // 22: audioPlayStatus
                "\"audio_read_status\" INTEGER," + // 23: audioReadStatus
                "\"file_size\" INTEGER," + // 24: fileSize
                "\"off_size\" INTEGER);"); // 25: offSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_CONVERSATION_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConversationMsg entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getMsgConversationId());
 
        Long msgTime = entity.getMsgTime();
        if (msgTime != null) {
            stmt.bindLong(3, msgTime);
        }
        stmt.bindString(4, entity.getMsgSrcNo());
        stmt.bindString(5, entity.getMsgDstNo());
 
        String groupNo = entity.getGroupNo();
        if (groupNo != null) {
            stmt.bindString(6, groupNo);
        }
 
        String msgUctId = entity.getMsgUctId();
        if (msgUctId != null) {
            stmt.bindString(7, msgUctId);
        }
 
        Integer msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(8, msgType);
        }
 
        Integer msgTxtSplit = entity.getMsgTxtSplit();
        if (msgTxtSplit != null) {
            stmt.bindLong(9, msgTxtSplit);
        }
 
        Integer recvCfm = entity.getRecvCfm();
        if (recvCfm != null) {
            stmt.bindLong(10, recvCfm);
        }
 
        Integer recvNotify = entity.getRecvNotify();
        if (recvNotify != null) {
            stmt.bindLong(11, recvNotify);
        }
 
        String remoteMsgContent = entity.getRemoteMsgContent();
        if (remoteMsgContent != null) {
            stmt.bindString(12, remoteMsgContent);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
 
        Integer contentLength = entity.getContentLength();
        if (contentLength != null) {
            stmt.bindLong(14, contentLength);
        }
 
        Integer msgDirection = entity.getMsgDirection();
        if (msgDirection != null) {
            stmt.bindLong(15, msgDirection);
        }
 
        String localImgPath = entity.getLocalImgPath();
        if (localImgPath != null) {
            stmt.bindString(16, localImgPath);
        }
 
        String remoteImgPath = entity.getRemoteImgPath();
        if (remoteImgPath != null) {
            stmt.bindString(17, remoteImgPath);
        }
 
        Integer msgStatus = entity.getMsgStatus();
        if (msgStatus != null) {
            stmt.bindLong(18, msgStatus);
        }
 
        Integer cfmType = entity.getCfmType();
        if (cfmType != null) {
            stmt.bindLong(19, cfmType);
        }
 
        Integer result = entity.getResult();
        if (result != null) {
            stmt.bindLong(20, result);
        }
 
        Integer readStatus = entity.getReadStatus();
        if (readStatus != null) {
            stmt.bindLong(21, readStatus);
        }
 
        Integer audioLength = entity.getAudioLength();
        if (audioLength != null) {
            stmt.bindLong(22, audioLength);
        }
 
        Integer audioPlayStatus = entity.getAudioPlayStatus();
        if (audioPlayStatus != null) {
            stmt.bindLong(23, audioPlayStatus);
        }
 
        Integer audioReadStatus = entity.getAudioReadStatus();
        if (audioReadStatus != null) {
            stmt.bindLong(24, audioReadStatus);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(25, fileSize);
        }
 
        Long offSize = entity.getOffSize();
        if (offSize != null) {
            stmt.bindLong(26, offSize);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConversationMsg entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getMsgConversationId());
 
        Long msgTime = entity.getMsgTime();
        if (msgTime != null) {
            stmt.bindLong(3, msgTime);
        }
        stmt.bindString(4, entity.getMsgSrcNo());
        stmt.bindString(5, entity.getMsgDstNo());
 
        String groupNo = entity.getGroupNo();
        if (groupNo != null) {
            stmt.bindString(6, groupNo);
        }
 
        String msgUctId = entity.getMsgUctId();
        if (msgUctId != null) {
            stmt.bindString(7, msgUctId);
        }
 
        Integer msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindLong(8, msgType);
        }
 
        Integer msgTxtSplit = entity.getMsgTxtSplit();
        if (msgTxtSplit != null) {
            stmt.bindLong(9, msgTxtSplit);
        }
 
        Integer recvCfm = entity.getRecvCfm();
        if (recvCfm != null) {
            stmt.bindLong(10, recvCfm);
        }
 
        Integer recvNotify = entity.getRecvNotify();
        if (recvNotify != null) {
            stmt.bindLong(11, recvNotify);
        }
 
        String remoteMsgContent = entity.getRemoteMsgContent();
        if (remoteMsgContent != null) {
            stmt.bindString(12, remoteMsgContent);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
 
        Integer contentLength = entity.getContentLength();
        if (contentLength != null) {
            stmt.bindLong(14, contentLength);
        }
 
        Integer msgDirection = entity.getMsgDirection();
        if (msgDirection != null) {
            stmt.bindLong(15, msgDirection);
        }
 
        String localImgPath = entity.getLocalImgPath();
        if (localImgPath != null) {
            stmt.bindString(16, localImgPath);
        }
 
        String remoteImgPath = entity.getRemoteImgPath();
        if (remoteImgPath != null) {
            stmt.bindString(17, remoteImgPath);
        }
 
        Integer msgStatus = entity.getMsgStatus();
        if (msgStatus != null) {
            stmt.bindLong(18, msgStatus);
        }
 
        Integer cfmType = entity.getCfmType();
        if (cfmType != null) {
            stmt.bindLong(19, cfmType);
        }
 
        Integer result = entity.getResult();
        if (result != null) {
            stmt.bindLong(20, result);
        }
 
        Integer readStatus = entity.getReadStatus();
        if (readStatus != null) {
            stmt.bindLong(21, readStatus);
        }
 
        Integer audioLength = entity.getAudioLength();
        if (audioLength != null) {
            stmt.bindLong(22, audioLength);
        }
 
        Integer audioPlayStatus = entity.getAudioPlayStatus();
        if (audioPlayStatus != null) {
            stmt.bindLong(23, audioPlayStatus);
        }
 
        Integer audioReadStatus = entity.getAudioReadStatus();
        if (audioReadStatus != null) {
            stmt.bindLong(24, audioReadStatus);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(25, fileSize);
        }
 
        Long offSize = entity.getOffSize();
        if (offSize != null) {
            stmt.bindLong(26, offSize);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConversationMsg readEntity(Cursor cursor, int offset) {
        ConversationMsg entity = new ConversationMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getLong(offset + 1), // msgConversationId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // msgTime
            cursor.getString(offset + 3), // msgSrcNo
            cursor.getString(offset + 4), // msgDstNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // groupNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // msgUctId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // msgType
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // msgTxtSplit
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // recvCfm
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // recvNotify
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remoteMsgContent
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // content
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // contentLength
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // msgDirection
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // localImgPath
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // remoteImgPath
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // msgStatus
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // cfmType
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // result
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // readStatus
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // audioLength
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // audioPlayStatus
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // audioReadStatus
            cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24), // fileSize
            cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25) // offSize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConversationMsg entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgConversationId(cursor.getLong(offset + 1));
        entity.setMsgTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMsgSrcNo(cursor.getString(offset + 3));
        entity.setMsgDstNo(cursor.getString(offset + 4));
        entity.setGroupNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMsgUctId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMsgType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMsgTxtSplit(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setRecvCfm(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setRecvNotify(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRemoteMsgContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setContentLength(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setMsgDirection(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setLocalImgPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRemoteImgPath(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMsgStatus(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setCfmType(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setResult(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setReadStatus(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setAudioLength(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setAudioPlayStatus(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setAudioReadStatus(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setFileSize(cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24));
        entity.setOffSize(cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConversationMsg entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConversationMsg entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
